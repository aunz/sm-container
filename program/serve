#!/usr/bin/env python
import os
import sys
import subprocess

print('Start SERVE')


########## 1 ########## # some printing abt the sys


if os.environ.get('PRINT_SYS'):
    print(os.environ)
    
    print('pip freeze')
    subprocess.call('pip freeze', shell=True)

    print('df -h')
    subprocess.call('df -h', shell=True)

    print('free -h')
    subprocess.call('free -h', shell=True)
    
    print('dir tree')
    '''In FrameworkModel: /opt/ml/{model, program}        
    In ScriptProcessor
        /opt/ml/config
        /opt/ml/output/data/tmp_data
        /opt/ml/output/metrics/cloudwatch
        /opt/ml/processing/{input/output/any_user_defined_channel}'''
    subprocess.call('find /opt | sed -e "s/[^-][^\/]*\// |/g" -e "s/|\([^ ]\)/|-\1/"', shell=True)
    
    # these in framework model
    print(os.environ.get('SAGEMAKER_PROGRAM')) # the entry_point
    print(os.environ.get('SAGEMAKER_SUBMIT_DIRECTORY')) # the sourcedir.tar.gz


    
########## 2 ########## Import user codes from framework model

from urllib.parse import urlparse
import tarfile
import boto3

tmp = os.environ.get('SAGEMAKER_SUBMIT_DIRECTORY')

if tmp:
    if os.environ.get('PRINT_SYS'): print('Download source file')
    # parse the s3 url and download as binary object
    tmp = urlparse(tmp)
    tmp = boto3.client('s3').get_object(Bucket=tmp.netloc, Key=tmp.path[1:])['Body']

    # extract the object to drive
    if os.environ.get('PRINT_SYS'): print('Extract source file')
    with tarfile.open(mode='r:gz', fileobj=tmp) as f: f.extractall('/opt/program/userpackage')

cmd = 'cd /opt/program/ && pip3 install --no-index --no-cache-dir . '
if not os.environ.get('PRINT_SYS'): cmd += '-q'

subprocess.call(cmd, shell=True)

del tmp

if os.environ.get('PRINT_SYS'):
    print('dir tree')
    subprocess.call('find /opt | sed -e "s/[^-][^\/]*\// |/g" -e "s/|\([^ ]\)/|-\1/"', shell=True)


########## 3 ########## import the user code, expecting model_fn, transform_fn

import importlib
import re

module_name = re.sub(r'\.py', '', os.environ.get('SAGEMAKER_PROGRAM'), flags=re.I)
module_name = importlib.import_module('userpackage.' + module_name)

model_fn = module_name.model_fn
model = model_fn('/opt/ml/model/') # call with the model dir, should return a model

transform_fn = module_name.transform_fn


########## 4 ########## Finallly, Flask 

import flask

app = flask.Flask(__name__)

# disable the WARNING: Do not use the development server in a production environment.
sys.modules['flask.cli'].show_server_banner = lambda *x: None 

@app.route('/ping', methods=['GET'])
def ping():
    return flask.Response(response='\n', status=200, mimetype='application/json')

@app.route('/invocations', methods=['POST'])
def invocations():
    return transform_fn(flask.request.get_data(cache=False), model) # call with data & model

if __name__ == '__main__':
    app.run(
        host=os.environ.get('FLASK_RUN_HOST', '0.0.0.0'),
        port=os.environ.get('FLASK_RUN_PORT', 8080)
    )
