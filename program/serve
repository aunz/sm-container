#!/usr/bin/env python

import os
import sys
import subprocess

print('Start SERVE')


########## 1 ########## # some printing abt the sys


if os.environ.get('PRINT_SYS'):
    print(os.environ)
    
    print('pip freeze')
    subprocess.call('pip freeze', shell=True)

    print('df -h')
    subprocess.call('df -h', shell=True)

    print('free -h')
    subprocess.call('free -h', shell=True)

    subprocess.call('ls /', shell=True)
    subprocess.call('ls /opt', shell=True)

    print('\n/opt/ml')
    subprocess.call('ls /opt/ml', shell=True)

    # These in FrameWorkModel
    print('\n/opt/ml/model')
    subprocess.call('ls /opt/ml/model', shell=True)
    print('\n/opt/program')
    subprocess.call('ls /opt/program', shell=True)

    # These in ScriptProcessor
    print('\n/opt/ml/config')
    subprocess.call('ls /opt/ml/config', shell=True)
    print('\n/opt/ml/output')
    subprocess.call('ls /opt/ml/output', shell=True)
    print('\n/opt/ml/output/data')
    subprocess.call('ls /opt/ml/output/data', shell=True)
    print('\n/opt/ml/output/data/tmp_data')
    subprocess.call('ls /opt/ml/output/data/tmp_data', shell=True)
    print('\n/opt/ml/output/metrics')
    subprocess.call('ls /opt/ml/output/metrics', shell=True)
    print('\n/opt/ml/output/metrics/cloudwatch')
    subprocess.call('ls /opt/ml/output/metrics/cloudwatch', shell=True)
    print('\n/opt/ml/processing')
    subprocess.call('ls /opt/ml/processing', shell=True)
    print('\n/opt/ml/processing/input')
    subprocess.call('ls /opt/ml/processing/input', shell=True)
    print('\n/opt/ml/processing/input/code')
    subprocess.call('ls /opt/ml/processing/input/code', shell=True)
    print('\n/opt/ml/processing/output')
    subprocess.call('ls /opt/ml/processing/output', shell=True)

    # these in framework model
    print(os.environ.get('SAGEMAKER_PROGRAM')) # the entry_point
    print(os.environ.get('SAGEMAKER_SUBMIT_DIRECTORY')) # the sourcedir.tar.gz


    
########## 2 ########## Import user codes from framework model

from urllib.parse import urlparse
import tarfile
import boto3

tmp = os.environ.get('SAGEMAKER_SUBMIT_DIRECTORY')

if not tmp: raise Exception('The environment variable SAGEMAKER_SUBMIT_DIRECTORY is needed')

# parse the s3 url and download as binary object
tmp = urlparse(tmp)
tmp = boto3.client('s3').get_object(Bucket=tmp.netloc, Key=tmp.path[1:])['Body']

# extract the object to drive
with tarfile.open(mode='r:gz', fileobj=tmp) as f: f.extractall('/opt/program/user_package')

# write a setup.py & install it, so user source_dir shouldn't have setup.py  
with open('/opt/program/user_package/setup.py', 'w') as f:
    f.write('from setuptools import setup; setup(name="User Package", packages=[""])')
    
subprocess.call('cd /opt/program/user_package && pip3 install .', shell=True)

del tmp



########## 3 ########## import the user code, expecting model_fn, transform_fn

import importlib
import re

module_name = re.sub(r'\.py', '', os.environ.get('SAGEMAKER_PROGRAM'), flags=re.I)
module_name = importlib.import_module(module_name)

model_fn = module_name.model_fn
model = model_fn('/opt/ml/model') # call with the model dir, should return a model

transform_fn = module_name.transform_fn


########## 4 ########## Finallly, Flask 

import flask

app = flask.Flask(__name__)

# disable the WARNING: Do not use the development server in a production environment.
sys.modules['flask.cli'].show_server_banner = lambda *x: None 

@app.route('/ping', methods=['GET'])
def ping():
    return flask.Response(response='\n', status=200, mimetype='application/json')

@app.route('/invocations', methods=['POST'])
def invocations():
    return transform_fn(flask.request.get_data(cache=False), model) # call with data & model

if __name__ == '__main__':
    app.run(
        host=os.environ.get('FLASK_RUN_HOST', '0.0.0.0'),
        port=os.environ.get('FLASK_RUN_PORT', 8080)
    )
